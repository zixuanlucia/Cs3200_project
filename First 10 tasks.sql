/*******************************************************************************
a) Register a new user
b) Subscribe a user to an app
c) Add a show to a user’s “My List”
d) Update an app’s version on a platform
e) Add a new video (with all associated meta data), which is the latest in a show’s current season
f) Produce a ranked list of the top-10 most watched shows, each with the corresponding app
g) Find all free videos on a particular platform
h) Find all long videos that were released this year and aren’t part of any show
i) Produce a ranked list of revenue generated by apps in a country
j) Produce a ranked list of watch counts from the top-3 video tags
********************************************************************************/
/* a) Register a new user */
INSERT INTO [User] ([Email],[FirstName],[LastName], [Country],[Password])
 VALUES ('jess.m@qq.com', 'Jess','M','CHINA','19970sdf04');


/* b) Subscribe a user to an app */
INSERT INTO [Subscription] ([UserId],[AppId],[Cost],[Expiration])
VALUES (11, 1, 4.99, '2021-07-18 00:00:00');



/* c)  Add a show to a user’s “My List” */
/* adding friends into user 9's mylist */
INSERT INTO [MyList] ([Userid], [VideoId]) VALUES (9, 7);
INSERT INTO [MyList] ([Userid], [VideoId]) VALUES (9, 8);
INSERT INTO [MyList] ([Userid], [VideoId]) VALUES (9, 9);
INSERT INTO [MyList] ([Userid], [VideoId]) VALUES (9, 10);


/* d) Update an app’s version on a platform. it only make sense that with the update of version, rating also updates. */
/* we don't think it's a good idea to update a version since we would lose data on how the former versions did */
/* that said, here is to query to how you would update it*/
UPDATE [AppPlatform] SET [Version] = 7.7 Where [PlatformId] = 1 AND [AppId] = 9;
UPDATE [AppPlatform] SET [Rating] = 8.2 Where [PlatformId] = 1 AND [AppId] = 9;


/* e) Add a new video (with all associated meta data), which is the latest 
in a show’s current season */
INSERT INTO [Video]  ([AppId], [Title], [Description], [ReleaseDate],
                      [Duration], [Free], [Count], [ShowId])
Values (1,'friends 5','having some friends', '2020-11-15 00:00:00',1200, false, 0, 1);

INSERT INTO [Season] ([ShowId],[VideoId], [Season],[Episode]) VALUES (1, 46, 1, 5);


/* f) Produce a ranked list of the top-10 most watched shows, each with the corresponding app */
/* we have 11 shows, and hahahaha shouldn't be a part of it because it's a bad show*/
SELECT
  a.Name,
  s.Title,
  sum(v.Count) as Times_Watched
FROM
  app a
  join video v on v.AppId = a.Id
  join show s on s.Id = v.ShowId
GROUP BY
  s.Title
ORDER BY
  Times_Watched desc
LIMIT
  10


/* g) */
/* Find all free videos on a particular platform
    Platform is parameterized, currently shown with the value of Android
*/
select
  v.title,
  v.Description
FROM
  Video v
  join Appplatform a on a.AppId = v.AppId
  join platform p on p.Id = a.PlatformId
WHERE
  v.Free like true
  and p.Id = 1
GROUP BY
  title


/* h) Find all long videos that were released this year and aren’t part of any show */
/* for purpose of showing that they don't belong to any show, we will show the null columns */
SELECT
  *
FROM
  video v
  left join season s on s.VideoId = v.Id
WHERE
  v.Duration > 3600
  AND v.ReleaseDate like '2020%'
  AND s.ShowId IS NULL


/* i) Produce a ranked list of revenue generated by apps in a country */
/* Produce a ranked list of revenue generated by apps in a country
    Country is parameterized, currently shown with the value of 'USA'
*/
select
  s.AppId as App_Id,
  a.Name as App_Name,
  ROUND(sum(s.Cost), 2) as Revenue
from
  User u
  inner join Subscription s on u.id = s.UserId
  inner join App a on a.Id = s.AppId
where
  u.Country LIKE 'USA'
group by
  s.AppId
order by
  revenue desc


/* j) Produce a ranked list of watch counts from the top-3 video tags*/
select
  COUNT(t.Tag) as Tag_Count,
  t.Tag as Tag
from
  Tags t
GROUP BY
  t.Tag
ORDER BY
  Tag_Count desc
LIMIT
  3


