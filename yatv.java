package databases;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.sqlite.SQLiteConfig;

/**
 * Command-line application for a set of queries
 * on the Chinook database
 * 
 * Name: Jiyuan Jia
 * 
 * @author derbinsky
 */
public class YaTV {

  /**
   * Allowed query types
   */
  private static enum QueryTypes {
    RegisterANewUser,
    SubscribeAUserToAnApp,
    AddAShowToMyList,
    UpdateVersionOnPlatform,
    AddLatestVideo,
    ProduceARankedListOfTop10,
    FindAllFreeVideos,
    FindAllLongVideos,
    ProduceARankedListOfRevenue,
    ProduceARankedListOfWatch,
    WhoHasTheLongestList,
    HowManyUsersSubscribedHighestRatingAndAvailableForMobilePhones,
    PeopleWatchedVideoWithMostNumberOfTags,
    USAAllAppsWatchVideos,
    WhichVideoIsPopularInEachCountry
  }

  /**
   * Query type and parameter value
   * (null if not appropriate)
   * 
   * @author derbinsky
   */
  private static class QueryData {
    final public QueryTypes queryType;
    final public String queryParam;

    public QueryData(QueryTypes qn, String qp) {
      queryType = qn;
      queryParam = qp;
    }

    @Override
    public String toString() {
      return String.format("%s" + ((queryParam == null)?(""):(" (%s)")), queryType, queryParam);
    }
  }

  /**
   * Usage statement, then exit
   * 
   * @return null (to make other code easier)
   */
  private static QueryData _usage() {
    System.out.printf("Usage: java %s <path to YaTV database> <query #> [parameter value]%n%n", YaTV.class.getCanonicalName());
    System.out.printf("1) Register a new user%n");
    System.out.printf("2) Subscribe a user to an app%n");
    System.out.printf("3) Add a show to a user’s “My List”%n");
    System.out.printf("4) Update an app’s version on a platform%n");
    System.out.printf("5) Add a new video (with all associated meta data), which is the latest in a show’s current season%n");
    System.out.printf("6) Produce a ranked list of the top-10 most watched shows, each with the corresponding app\n"
        + "%n");
    System.out.printf("7) Find all free videos on a particular platform%n");
    System.out.printf("8) Find all long videos that were released this year and aren’t part of any show%n");
    System.out.printf("9) Produce a ranked list of revenue generated by apps in a country%n");
    System.out.printf("10) Produce a ranked list of watch counts from the top-3 video tags%n");
    System.out.printf("11) Who has the longest list?%n");
    System.out.printf("12) How many users subscribed to the app with the highest rating and is available for mobile phones?%n");
    System.out.printf("13) List the people watched the video with the most number of tags, order by UserId then by FirstName%n");
    System.out.printf("14) Among all users from USA, list all the apps they used to watch videos on mobile phones? Order by name, version then rating.%n");
    System.out.printf("15) Show which video is popular (receives the more than 3 likes) in each country and from which platform they are watching"
        + " the video from. Order by country then number of likes.%n%n");
    System.exit(0);
    return null;
  }

  /**
   * Validates command-line arguments
   * 
   * @param args command-line arguments
   * @return query data, or null if invalid
   * @throws ClassNotFoundException cannot find JDBC driver
   */
  private static QueryData validateInputs(String[] args) throws ClassNotFoundException {
    // must have at least two arguments
    if (args.length < 2) {
      return _usage();
    }

    // attempt connecting to the database
    // (read-only ensures exists)
    Class.forName( "org.sqlite.JDBC" );
    final SQLiteConfig config = new SQLiteConfig();
    config.setReadOnly(true);
    try (final Connection connection = DriverManager.getConnection( "jdbc:sqlite:" + args[0], config.toProperties() )) {
    } catch (SQLException e) {
      System.out.println("Invalid database");
      return _usage();
    }

    // make sure second argument is a valid query number
    // and third is appropriate to query
    try {
      final int queryNum = Integer.valueOf(args[1]);

      if (queryNum == 1) {
        if (args.length != 2) {
          return _usage();
        } else {
          return new QueryData(QueryTypes.RegisterANewUser, null);
        }
      } else if (queryNum == 2) {
        if (args.length != 2) {
          return _usage();
        } else {
          return new QueryData(QueryTypes.SubscribeAUserToAnApp, null);
        }
      } else if (queryNum == 3) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.AddAShowToMyList, null);
        }
      } else if (queryNum == 4) {
        if (args.length != 2) {
          return _usage();
        } else {
          return new QueryData(QueryTypes.UpdateVersionOnPlatform, null);
        }
      } else if (queryNum == 5) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.AddLatestVideo, null);
        }
      } else if (queryNum == 6) {
        if (args.length != 2) {
          return _usage();
        } else {
          return new QueryData(QueryTypes.ProduceARankedListOfTop10, null);
        }
      } else if (queryNum == 7) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.FindAllFreeVideos, null);
        }
      } else if (queryNum == 8) {
        if (args.length != 2) {
          return _usage();
        } else {
          return new QueryData(QueryTypes.FindAllLongVideos, null);
        }
      } else if (queryNum == 9) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.ProduceARankedListOfRevenue, null);
        }
      } else if (queryNum == 10) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.ProduceARankedListOfWatch, null);
        }
      } else if (queryNum == 11) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.WhoHasTheLongestList, null);
        }
      } else if (queryNum == 12) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.HowManyUsersSubscribedHighestRatingAndAvailableForMobilePhones, null);
        }
      } else if (queryNum == 13) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.PeopleWatchedVideoWithMostNumberOfTags, null);
        }
      } else if (queryNum == 14) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.USAAllAppsWatchVideos, null);
        }
      } else if (queryNum == 15) {
        if (args.length != 2) {
          return _usage();
        } else {
          Integer.valueOf(args[2]);
          return new QueryData(QueryTypes.WhichVideoIsPopularInEachCountry, null);
        }
      } else {
        return _usage();
      }

    } catch (NumberFormatException e) {
      return _usage();
    }
  }

  /**
   * Command-line Chinook utility
   * 
   * @param args command-line arguments
   * @throws ClassNotFoundException cannot find JDBC driver
   * @throws SQLException SQL gone bad
   */
  public static void main(String[] args) throws ClassNotFoundException, SQLException {

    // validates the inputs, exits if bad
    final QueryData qd = validateInputs(args);      

    // makes a connection to the database
    try (final Connection connection = DriverManager.getConnection("jdbc:sqlite:" + args[0])) {

      if (qd.queryType == QueryTypes.RegisterANewUser) {
        // code for query #1
        // adding a new user
        PreparedStatement stmt = connection.prepareStatement(
            "INSERT INTO [User] ([Email],[FirstName],[LastName], [Country],[Password]) \n"
                + "VALUES ('jess.m@qq.com', 'Jess','M','CHINA','19970sdf04');"); 

        stmt.executeUpdate();
        
        //all the user table with the user added to the list
        PreparedStatement users = connection.prepareStatement(
            "SELECT * FROM User"); 
        
        ResultSet res = users.executeQuery();
        
        // shows that we have added jess' email  when we output the table of all the users
        while (res.next()) {
          System.out.printf("%d. %s %s %s %n", res.getInt("Id"), res.getString("Email"), res.getString("FirstName")
              , res.getString("LastName"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.SubscribeAUserToAnApp) {
        // code for query #2
        // adding a subscription
        PreparedStatement stmt = connection.prepareStatement(
            "INSERT INTO [Subscription] ([UserId],[AppId],[Cost],[Expiration])\n"
                + "VALUES (11, 1, 4.99, '2021-07-18 00:00:00');"); 

        stmt.executeUpdate();
        
        //all the subscription of jess
        PreparedStatement jessSub = connection.prepareStatement(
            "select * from subscription join app on subscription.AppId = app.Id where userid = 11"); 
        
        ResultSet res = jessSub.executeQuery();
        
        // shows that we have added the subscription
        while (res.next()) {
          System.out.printf("%d. %d %d (%s)%n", res.getInt("*"), res.getInt("app.id"), res.getString("app.name"),
                     res.getInt("subscription.Cost"), res.getString("subscription.Expiration"));
        }
        res.close();
        stmt.close();
        
      } else if (qd.queryType == QueryTypes.AddAShowToMyList) {
        // code for query #3
        PreparedStatement stmt = connection.prepareStatement(
            "INSERT INTO [MyList] ([Userid], [VideoId], [InShow?]) VALUES (9, 7, true);\n"
                + "INSERT INTO [MyList] ([Userid], [VideoId], [InShow?]) VALUES (9, 8, true);\n"
                + "INSERT INTO [MyList] ([Userid], [VideoId], [InShow?]) VALUES (9, 9, true);\n"
                + "INSERT INTO [MyList] ([Userid], [VideoId], [InShow?]) VALUES (9, 10, true);"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%d %d%n", res.getInt("Userid"), res.getInt("VideoId"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.UpdateVersionOnPlatform) {
        // code for query #4
        PreparedStatement stmt = connection.prepareStatement(
            "UPDATE [AppPlatform] SET [Version] = 7.7 Where [PlatformId] = 1 AND [AppId] = 9;\n"
                + "UPDATE [AppPlatform] SET [Rating] = 8.2 Where [PlatformId] = 1 AND [AppId] = 9;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%d %d%n", res.getInt("Version"), res.getInt("Rating"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.AddLatestVideo) {
        // code for query #5
        PreparedStatement stmt = connection.prepareStatement(
            "INSERT INTO [Video]  ([AppId], [Title], [Description],\n"
                + "                      [ReleaseDate], [Duration], [Free], \n"
                + "                      [Count], [ShowId], [Season Number], [Episode])\n"
                + "Values (1,'friends 5','having some friends', '2020-11-15 00:00:00',\n"
                + "        1200, false, 0, 1, 1, 5);"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%d %s %s %s %d %s %d %d %d %d%n", res.getInt("AppId"), res.getString("Title"), 
              res.getString("Description"), res.getString("ReleaseDate"), res.getInt("Duration"), res.getString("Free"),
              res.getInt("Count"), res.getInt("ShowId"), res.getInt("Season Number"), res.getInt("Episode"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.ProduceARankedListOfTop10) {
        // code for query #6
        PreparedStatement stmt = connection.prepareStatement(
            "SELECT\n"
                + "  a.Name,\n"
                + "  s.Title,\n"
                + "  sum(v.Count) as Times_Watched\n"
                + "FROM\n"
                + "  app a\n"
                + "  join video v on v.AppId = a.Id\n"
                + "  join show s on s.Id = v.ShowId\n"
                + "GROUP BY\n"
                + "  s.Title\n"
                + "ORDER BY\n"
                + "  Times_Watched desc\n"
                + "LIMIT\n"
                + "  10;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%s %s %d%n", res.getString("Name"), res.getString("Title"), res.getInt("Times_Watched"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.FindAllFreeVideos) {
        // code for query #7
        PreparedStatement stmt = connection.prepareStatement(
            "select\n"
                + "  v.Title,\n"
                + "  v.Description\n"
                + "FROM\n"
                + "  Video v\n"
                + "  join Appplatform a on a.AppId = v.AppId\n"
                + "  join platform p on p.Id = a.PlatformId\n"
                + "WHERE\n"
                + "  v.Free like true\n"
                + "  and p.Id = 1\n"
                + "GROUP BY\n"
                + "  title;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%s %s%n", res.getString("Title"), res.getString("Description"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.FindAllLongVideos) {
        // code for query #8
        PreparedStatement stmt = connection.prepareStatement(
            "SELECT\n"
                + "  v.Id,\n"
                + "  a.Name as AppName,\n"
                + "  v.Title,\n"
                + "  v.Description,\n"
                + "  v.ReleaseDate,\n"
                + "  v.Duration,\n"
                + "  v.Free\n"
                + "FROM\n"
                + "  video v join App a on a.Id = v.AppId\n"
                + "WHERE\n"
                + "  v.Duration > 3600\n"
                + "  AND v.ReleaseDate like '2020%'\n"
                + "  AND v.ShowId IS NULL;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%d %s %s %s %s %d %d%n", res.getInt("Id"), res.getString("AppName"), res.getString("Title"),
              res.getString("Description"), res.getString("ReleaseDate"), res.getInt("Duration"), res.getInt("Free"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.ProduceARankedListOfRevenue) {
        // code for query #9
        PreparedStatement stmt = connection.prepareStatement(
            "select\n"
                + "  s.AppId as App_Id,\n"
                + "  a.Name as App_Name,\n"
                + "  ROUND(sum(s.Cost), 2) as Revenue\n"
                + "from\n"
                + "  User u\n"
                + "  inner join Subscription s on u.id = s.UserId\n"
                + "  inner join App a on a.Id = s.AppId\n"
                + "where\n"
                + "  u.Country LIKE 'USA'\n"
                + "group by\n"
                + "  s.AppId\n"
                + "order by\n"
                + "  revenue desc;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%d %s %d%n", res.getInt("App_Id"), res.getString("App_Name"), res.getInt("Revenue"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.ProduceARankedListOfWatch) {
        // code for query #10
        PreparedStatement stmt = connection.prepareStatement(
            "select\n"
                + "  COUNT(t.Tag) as Tag_Count,\n"
                + "  t.Tag as Tag\n"
                + "from\n"
                + "  Tags t\n"
                + "GROUP BY\n"
                + "  t.Tag\n"
                + "ORDER BY\n"
                + "  Tag_Count desc\n"
                + "LIMIT\n"
                + "  3;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%d %s%n", res.getInt("Tag_Count"), res.getString("Tag"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.WhoHasTheLongestList) {
        // code for query #11
        PreparedStatement stmt = connection.prepareStatement(
            "Select *\n"
                + "from(\n"
                + "Select count(sub.Id) as length,\n"
                + "sub.FirstName,\n"
                + "sub.LastName\n"
                + "FROM(\n"
                + "select * \n"
                + "from User u\n"
                + "join MyList ml on ml.UserId = u.Id) sub\n"
                + "group by sub.Id\n"
                + "order by length DESC)\n"
                + "limit 1;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%d %s %s%n", res.getInt("length"), res.getString("FirstName"), res.getString("LastName"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.HowManyUsersSubscribedHighestRatingAndAvailableForMobilePhones) {
        // code for query #12
        PreparedStatement stmt = connection.prepareStatement(
            "Select count(Id) as num \n"
                + "From(\n"
                + "select u.FirstName,\n"
                + "u.LastName,\n"
                + "u.Id  \n"
                + "from(\n"
                + "Select AppId\n"
                + "From Platform pt\n"
                + "join AppPlatform apt on apt.PlatformId = pt.Id\n"
                + "where Mobile = 1\n"
                + "order by Rating DESC\n"
                + "limit 1)s\n"
                + "join App a on a.Id =s.AppId\n"
                + "join Subscription sub on sub.AppId = a.Id\n"
                + "join User u on u.Id = sub.UserId)s1;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%d%n", res.getInt("num"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.PeopleWatchedVideoWithMostNumberOfTags) {
        // code for query #13
        PreparedStatement stmt = connection.prepareStatement(
            "select s2.FirstName,\n"
                + "s2.LastName,\n"
                + "s2.UserId\n"
                + "from(\n"
                + "Select *\n"
                + "from \n"
                + "(Select count(Tag) as num,\n"
                + "VideoId\n"
                + "From Tags t \n"
                + "join Video v on v.Id = t.VideoId\n"
                + "group by VideoId \n"
                + "order by num DESC\n"
                + "limit 1 ) s1 \n"
                + "join UserVideo uv on uv.VideoId = s1.VideoId\n"
                + "join User u on u.Id = uv.UserId ) s2\n"
                + "Order by UserId, FirstName;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%s %s %d%n", res.getString("FirstName"), res.getString("LastName"), res.getInt("UserId"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.USAAllAppsWatchVideos) {
        // code for query #14
        PreparedStatement stmt = connection.prepareStatement(
            "Select a.Name,\n"
                + "Version,\n"
                + "Rating\n"
                + "From(\n"
                + "select id\n"
                + "From User u\n"
                + "join UserVideo uv on uv.UserId = u.Id\n"
                + "where Country = 'USA'\n"
                + "group by id) s1\n"
                + "join App a on a.Id = s1.Id\n"
                + "join AppPlatform ap on ap.AppId = a.Id\n"
                + "join Platform p on p.Id = ap.PlatformId\n"
                + "where Mobile = 1 and s1.Id = a.ID\n"
                + "Order by a.Name,Version,Rating;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%s %d %d%n", res.getString("Name"), res.getInt("Version"), res.getInt("Rating"));
        }
        res.close();
        stmt.close();
      } else if (qd.queryType == QueryTypes.WhichVideoIsPopularInEachCountry) {
        // code for query #15
        PreparedStatement stmt = connection.prepareStatement(
            "Select v.Title,\n"
                + "s1.Country,\n"
                + "s1.likes,\n"
                + "a.Name\n"
                + "From (\n"
                + "Select VideoId,\n"
                + "Country,\n"
                + "count(likes) as likes \n"
                + "From User u \n"
                + "join UserVideo uv on uv.UserId = u.Id \n"
                + "where uv.Likes = 1 \n"
                + "group by u.Country) s1\n"
                + "join Video v on v.Id = s1.VideoId\n"
                + "join App a on a.Id = v.AppId\n"
                + "where likes > 3\n"
                + "order by Country, likes;"); 

        ResultSet res = stmt.executeQuery();
        while (res.next()) {
          System.out.printf("%s %s %d %s%n", res.getString("Title"), res.getString("Country"),
              res.getInt("likes"), res.getString("Name"));
        }
        res.close();
        stmt.close();
      }
    }
  }
}
